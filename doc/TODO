RetroBASIC TODO/BUGS/ERRATA list

MS = MS BASIC, 6502 40-bit version
CB = Commodore's MS BASIC
HP = HP Time-Shared BASIC
AB = Atari BASIC
IB = Integer BASIC (aka Apple BASIC)
GW = GW-BASIC
WB = Wang BASIC
PA = Palo Alto Tiny BASIC
BP - DEC BASIC-PLUS

- add DET function

- option base 1 should return error on 0

- Dartmouth style FOR loops, exit on 1 TO 0
=
- add parameter checking to functions, currently most of them don't check that they were passed a string/number

- need to allow multiple INPUTs on a single line, currently it requires a CR between values

- LINPUT/LINE INPUT/INPUT LINE

- MAX and MIN

- WHILE...WEND, LOOP...UNTIL, but so many variations...

- IMAGE (etc) for PRINT USING

- test and error on incorrect nesting of FOR loops, which we currently ignore

- add longer variable names

- CHAIN and COMMON

- DEFINT/SNG/DBL/STR does not support the "range" syntax, DEFINT A-F. only comma lists work, DEFINT A,B

- needs command-line switch for ANSI, controls tab stops and many errors

- support Dartmouth/ANSI style FOR loops which skip the body if the test fails on the first loop

- ELSE would be relatively easy to add, at least the single-line variety

- flesh out GET and PUT, which are just placeholders for now

- support AB's DEG and RAD modes? WB also had gradians; SELECT G, Commodore 3.5 has similar?

- PA allows multiple assignments in a LET, separated by commas, see assignlist.

- BP (and HP?) allows multiple assignments with equals, A=B=C=10

- PA and BP allow single or double quotes around strings

- PA allows # to define field widths in PRINT, so PRINT A,#3,B,C will print B and C in 3-character widths. All expressions following the format use that format until reset by another # or another PRINT

- PA prints a colon after INPUTs, not ?, and prints the variable name if no prompt is given. So "INPUT A" prints "A:", while INPUT "TYPE A NUMBER"A prints "TYPE A NUMBER:"

- LPOS, LPRINT, etc. from AB, GW and others

- file handling, OPEN, PRINT# etc.

- CINT CSNG CDBL are not implemented

- GW BASIC string formatters in PRINT USING, but number formats work

- EQ, GT, GE and similar alternatives to =, >, >= etc.

- EXCHANGE/SWAP that swaps the values of two variables

- IF..LET, another alternative format for IF

- ERASE, clears variables (IBM Advanced BASIC)

Debatable:

- BASIC-PLUS uses WAIT to limit the amount of time INPUT will wait, other dialects have similar variations

- it would not be difficult to allow any variable to hold a string, but in most dialects that is an error

- SUB$ from Apple Business BASIC substitutes one string into another. EG, SUB$("Hello!", "**", 2) produces H**lo!

- add TEN function, alias for HEX found in Apple Business BASIC?

- UK BASICs generally use LN for LOG and LOG for CLOG. Add a switch for this?

- cotan etc?

- CODE from Sinclair and CH from Atom, basically the same as ASC.

- backslash for statement separators seen in Multics and BASIC-PLUS. The later requires spaces on either side. Easy to convert to colons, although the formatting in BASIC-PLUS documentation is nice.

- option for INT to be trunc instead of floor? it's this way in early Dartmouth and a few later versions like Benton Harbour, but very rare.

- RANDOMIZE TIMER for GW support?

- add Wang style AND function, AND(string, hex mask), masks string and returns it.

Will not be done:

- STORE and RECALL from Applesoft, which writes and reads all the values in an array to cassette

- RESTORE* and RESTORE$ from Dartmouth, which reset the numeric vs. string DATA pointers.

- IP and FP, aliases for FIX and FRAC, too easily overlap with variable names.

- EXAM and FETCH aliases to PEEK from North Star and Opus and similar. No point, this returns 0 anyway.

- WB allows RESTORE to use an ordinal position in the list, as opposed to a line number. There appears to be no easy way to distinguish this.

- WB uses CONVERT for ASC, which steps on HPs CONVERT.

- NUM, which is Digital Group's version of VAL, or NUM$ which is the same as STR$.

- NODATA statement from BASIC-PLUS. This is simply an ON ERROR that traps the no-more-data error.
